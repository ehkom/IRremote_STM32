ARM GAS  /tmp/ccdjCcKj.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"ir_Denon.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.sendDenon,"ax",%progbits
  16              		.align	1
  17              		.global	sendDenon
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	sendDenon:
  24              	.LFB64:
  25              		.file 1 "Src/irremote/ir_Denon.c"
   1:Src/irremote/ir_Denon.c **** #include "IRremote.h"
   2:Src/irremote/ir_Denon.c **** #include "IRremoteInt.h"
   3:Src/irremote/ir_Denon.c **** 
   4:Src/irremote/ir_Denon.c **** // Reverse Engineered by looking at RAW dumps generated by IRremote
   5:Src/irremote/ir_Denon.c **** 
   6:Src/irremote/ir_Denon.c **** // I have since discovered that Denon publish all their IR codes:
   7:Src/irremote/ir_Denon.c **** //  https://www.google.co.uk/search?q=DENON+MASTER+IR+Hex+Command+Sheet
   8:Src/irremote/ir_Denon.c **** //  -> http://assets.denon.com/documentmaster/us/denon%20master%20ir%20hex.xls
   9:Src/irremote/ir_Denon.c **** 
  10:Src/irremote/ir_Denon.c **** // Having looked at the official Denon Pronto sheet and reverse engineered
  11:Src/irremote/ir_Denon.c **** // the timing values from it, it is obvious that Denon have a range of
  12:Src/irremote/ir_Denon.c **** // different timings and protocols ...the values here work for my AVR-3801 Amp!
  13:Src/irremote/ir_Denon.c **** 
  14:Src/irremote/ir_Denon.c **** //==============================================================================
  15:Src/irremote/ir_Denon.c **** //                    DDDD   EEEEE  N   N   OOO   N   N
  16:Src/irremote/ir_Denon.c **** //                     D  D  E      NN  N  O   O  NN  N
  17:Src/irremote/ir_Denon.c **** //                     D  D  EEE    N N N  O   O  N N N
  18:Src/irremote/ir_Denon.c **** //                     D  D  E      N  NN  O   O  N  NN
  19:Src/irremote/ir_Denon.c **** //                    DDDD   EEEEE  N   N   OOO   N   N
  20:Src/irremote/ir_Denon.c **** //==============================================================================
  21:Src/irremote/ir_Denon.c **** 
  22:Src/irremote/ir_Denon.c **** #define BITS          14  // The number of bits in the command
  23:Src/irremote/ir_Denon.c **** 
  24:Src/irremote/ir_Denon.c **** #define HDR_MARK     300  // The length of the Header:Mark
  25:Src/irremote/ir_Denon.c **** #define HDR_SPACE    750  // The lenght of the Header:Space
  26:Src/irremote/ir_Denon.c **** 
  27:Src/irremote/ir_Denon.c **** #define BIT_MARK     300  // The length of a Bit:Mark
  28:Src/irremote/ir_Denon.c **** #define ONE_SPACE   1800  // The length of a Bit:Space for 1's
  29:Src/irremote/ir_Denon.c **** #define ZERO_SPACE   750  // The length of a Bit:Space for 0's
  30:Src/irremote/ir_Denon.c **** 
  31:Src/irremote/ir_Denon.c **** //+=============================================================================
  32:Src/irremote/ir_Denon.c **** //
  33:Src/irremote/ir_Denon.c **** #if SEND_DENON
ARM GAS  /tmp/ccdjCcKj.s 			page 2


  34:Src/irremote/ir_Denon.c **** void  sendDenon (unsigned long data,  int nbits)
  35:Src/irremote/ir_Denon.c **** {
  26              		.loc 1 35 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 38B5     		push	{r3, r4, r5, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 3, -16
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 0546     		mov	r5, r0
  39 0004 0C46     		mov	r4, r1
  36:Src/irremote/ir_Denon.c **** 	// Set IR carrier frequency
  37:Src/irremote/ir_Denon.c ****     irsend_enableIROut(38);
  40              		.loc 1 37 0
  41 0006 2620     		movs	r0, #38
  42              	.LVL1:
  43 0008 FFF7FEFF 		bl	irsend_enableIROut
  44              	.LVL2:
  38:Src/irremote/ir_Denon.c **** 
  39:Src/irremote/ir_Denon.c **** 	// Header
  40:Src/irremote/ir_Denon.c ****     irsend_mark (HDR_MARK);
  45              		.loc 1 40 0
  46 000c 4FF49670 		mov	r0, #300
  47 0010 FFF7FEFF 		bl	irsend_mark
  48              	.LVL3:
  41:Src/irremote/ir_Denon.c ****     irsend_space(HDR_SPACE);
  49              		.loc 1 41 0
  50 0014 40F2EE20 		movw	r0, #750
  51 0018 FFF7FEFF 		bl	irsend_space
  52              	.LVL4:
  42:Src/irremote/ir_Denon.c **** 
  43:Src/irremote/ir_Denon.c **** 	// Data
  44:Src/irremote/ir_Denon.c ****     unsigned long  mask;
  45:Src/irremote/ir_Denon.c ****     for (mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
  53              		.loc 1 45 0
  54 001c 631E     		subs	r3, r4, #1
  55 001e 0124     		movs	r4, #1
  56              	.LVL5:
  57 0020 9C40     		lsls	r4, r4, r3
  58              	.LVL6:
  59 0022 08E0     		b	.L2
  60              	.LVL7:
  61              	.L3:
  46:Src/irremote/ir_Denon.c **** 		if (data & mask) {
  47:Src/irremote/ir_Denon.c ****             irsend_mark (BIT_MARK);
  48:Src/irremote/ir_Denon.c ****             irsend_space(ONE_SPACE);
  49:Src/irremote/ir_Denon.c **** 		} else {
  50:Src/irremote/ir_Denon.c ****             irsend_mark (BIT_MARK);
  62              		.loc 1 50 0
  63 0024 4FF49670 		mov	r0, #300
  64 0028 FFF7FEFF 		bl	irsend_mark
  65              	.LVL8:
ARM GAS  /tmp/ccdjCcKj.s 			page 3


  51:Src/irremote/ir_Denon.c ****             irsend_space(ZERO_SPACE);
  66              		.loc 1 51 0
  67 002c 40F2EE20 		movw	r0, #750
  68 0030 FFF7FEFF 		bl	irsend_space
  69              	.LVL9:
  70              	.L4:
  45:Src/irremote/ir_Denon.c **** 		if (data & mask) {
  71              		.loc 1 45 0 discriminator 2
  72 0034 6408     		lsrs	r4, r4, #1
  73              	.LVL10:
  74              	.L2:
  45:Src/irremote/ir_Denon.c **** 		if (data & mask) {
  75              		.loc 1 45 0 is_stmt 0 discriminator 1
  76 0036 54B1     		cbz	r4, .L7
  46:Src/irremote/ir_Denon.c **** 		if (data & mask) {
  77              		.loc 1 46 0 is_stmt 1
  78 0038 2C42     		tst	r4, r5
  79 003a F3D0     		beq	.L3
  47:Src/irremote/ir_Denon.c ****             irsend_space(ONE_SPACE);
  80              		.loc 1 47 0
  81 003c 4FF49670 		mov	r0, #300
  82 0040 FFF7FEFF 		bl	irsend_mark
  83              	.LVL11:
  48:Src/irremote/ir_Denon.c **** 		} else {
  84              		.loc 1 48 0
  85 0044 4FF4E160 		mov	r0, #1800
  86 0048 FFF7FEFF 		bl	irsend_space
  87              	.LVL12:
  88 004c F2E7     		b	.L4
  89              	.L7:
  52:Src/irremote/ir_Denon.c **** 		}
  53:Src/irremote/ir_Denon.c **** 	}
  54:Src/irremote/ir_Denon.c **** 
  55:Src/irremote/ir_Denon.c **** 	// Footer
  56:Src/irremote/ir_Denon.c ****     irsend_mark(BIT_MARK);
  90              		.loc 1 56 0
  91 004e 4FF49670 		mov	r0, #300
  92 0052 FFF7FEFF 		bl	irsend_mark
  93              	.LVL13:
  57:Src/irremote/ir_Denon.c ****     irsend_space(0);  // Always end with the LED off
  94              		.loc 1 57 0
  95 0056 0020     		movs	r0, #0
  96 0058 FFF7FEFF 		bl	irsend_space
  97              	.LVL14:
  98 005c 38BD     		pop	{r3, r4, r5, pc}
  99              		.cfi_endproc
 100              	.LFE64:
 102              		.section	.text.decodeDenon,"ax",%progbits
 103              		.align	1
 104              		.global	decodeDenon
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu softvfp
 110              	decodeDenon:
 111              	.LFB65:
  58:Src/irremote/ir_Denon.c **** }
ARM GAS  /tmp/ccdjCcKj.s 			page 4


  59:Src/irremote/ir_Denon.c **** #endif
  60:Src/irremote/ir_Denon.c **** 
  61:Src/irremote/ir_Denon.c **** //+=============================================================================
  62:Src/irremote/ir_Denon.c **** //
  63:Src/irremote/ir_Denon.c **** #if DECODE_DENON
  64:Src/irremote/ir_Denon.c **** unsigned char  decodeDenon (struct decode_results *results)
  65:Src/irremote/ir_Denon.c **** {
 112              		.loc 1 65 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              	.LVL15:
  66:Src/irremote/ir_Denon.c **** 	unsigned long  data   = 0;  // Somewhere to build our code
  67:Src/irremote/ir_Denon.c **** 	int            offset = 1;  // Skip the Gap reading
  68:Src/irremote/ir_Denon.c **** 
  69:Src/irremote/ir_Denon.c **** 	// Check we have the right amount of data
  70:Src/irremote/ir_Denon.c ****     if (irparams.rawlen != 1 + 2 + (2 * BITS) + 1)  return FALSE ;
 117              		.loc 1 70 0
 118 0000 294B     		ldr	r3, .L26
 119 0002 DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 120 0004 DBB2     		uxtb	r3, r3
 121 0006 202B     		cmp	r3, #32
 122 0008 01D0     		beq	.L23
 123 000a 0020     		movs	r0, #0
 124              	.LVL16:
 125 000c 7047     		bx	lr
 126              	.LVL17:
 127              	.L23:
  65:Src/irremote/ir_Denon.c **** 	unsigned long  data   = 0;  // Somewhere to build our code
 128              		.loc 1 65 0
 129 000e 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 130              	.LCFI1:
 131              		.cfi_def_cfa_offset 24
 132              		.cfi_offset 4, -24
 133              		.cfi_offset 5, -20
 134              		.cfi_offset 6, -16
 135              		.cfi_offset 7, -12
 136              		.cfi_offset 8, -8
 137              		.cfi_offset 14, -4
 138 0012 0446     		mov	r4, r0
  71:Src/irremote/ir_Denon.c **** 
  72:Src/irremote/ir_Denon.c **** 	// Check initial Mark+Space match
  73:Src/irremote/ir_Denon.c ****     if (!MATCH_MARK (results->rawbuf[offset++], HDR_MARK ))  return FALSE ;
 139              		.loc 1 73 0
 140 0014 0369     		ldr	r3, [r0, #16]
 141              	.LVL18:
 142 0016 5868     		ldr	r0, [r3, #4]
 143              	.LVL19:
 144 0018 4FF49671 		mov	r1, #300
 145 001c FFF7FEFF 		bl	MATCH_MARK
 146              	.LVL20:
 147 0020 10B9     		cbnz	r0, .L24
 148 0022 0020     		movs	r0, #0
 149 0024 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 150              	.LVL21:
 151              	.L24:
  74:Src/irremote/ir_Denon.c ****     if (!MATCH_SPACE(results->rawbuf[offset++], HDR_SPACE))  return FALSE ;
ARM GAS  /tmp/ccdjCcKj.s 			page 5


 152              		.loc 1 74 0
 153 0028 2369     		ldr	r3, [r4, #16]
 154              	.LVL22:
 155 002a 9868     		ldr	r0, [r3, #8]
 156 002c 40F2EE21 		movw	r1, #750
 157 0030 FFF7FEFF 		bl	MATCH_SPACE
 158              	.LVL23:
 159 0034 78B3     		cbz	r0, .L16
 160 0036 0027     		movs	r7, #0
 161 0038 0325     		movs	r5, #3
 162 003a 3E46     		mov	r6, r7
 163 003c 0AE0     		b	.L10
 164              	.LVL24:
 165              	.L11:
 166              	.LBB2:
  75:Src/irremote/ir_Denon.c **** 
  76:Src/irremote/ir_Denon.c **** 	// Read the bits in
  77:Src/irremote/ir_Denon.c **** 	for (int i = 0;  i < BITS;  i++) {
  78:Src/irremote/ir_Denon.c **** 		// Each bit looks like: MARK + SPACE_1 -> 1
  79:Src/irremote/ir_Denon.c **** 		//                 or : MARK + SPACE_0 -> 0
  80:Src/irremote/ir_Denon.c ****         if (!MATCH_MARK(results->rawbuf[offset++], BIT_MARK))  return FALSE ;
  81:Src/irremote/ir_Denon.c **** 
  82:Src/irremote/ir_Denon.c **** 		// IR data is big-endian, so we shuffle it in from the right:
  83:Src/irremote/ir_Denon.c **** 		if      (MATCH_SPACE(results->rawbuf[offset], ONE_SPACE))   data = (data << 1) | 1 ;
  84:Src/irremote/ir_Denon.c **** 		else if (MATCH_SPACE(results->rawbuf[offset], ZERO_SPACE))  data = (data << 1) | 0 ;
 167              		.loc 1 84 0
 168 003e 2369     		ldr	r3, [r4, #16]
 169 0040 53F82800 		ldr	r0, [r3, r8, lsl #2]
 170 0044 40F2EE21 		movw	r1, #750
 171 0048 FFF7FEFF 		bl	MATCH_SPACE
 172              	.LVL25:
 173 004c 48B3     		cbz	r0, .L18
 174              		.loc 1 84 0 is_stmt 0 discriminator 1
 175 004e 7600     		lsls	r6, r6, #1
 176              	.LVL26:
 177              	.L12:
  85:Src/irremote/ir_Denon.c ****         else                                                        return FALSE ;
  86:Src/irremote/ir_Denon.c **** 		offset++;
 178              		.loc 1 86 0 is_stmt 1 discriminator 2
 179 0050 0235     		adds	r5, r5, #2
 180              	.LVL27:
  77:Src/irremote/ir_Denon.c **** 		// Each bit looks like: MARK + SPACE_1 -> 1
 181              		.loc 1 77 0 discriminator 2
 182 0052 0137     		adds	r7, r7, #1
 183              	.LVL28:
 184              	.L10:
  77:Src/irremote/ir_Denon.c **** 		// Each bit looks like: MARK + SPACE_1 -> 1
 185              		.loc 1 77 0 is_stmt 0 discriminator 1
 186 0054 0D2F     		cmp	r7, #13
 187 0056 16DC     		bgt	.L25
  80:Src/irremote/ir_Denon.c **** 
 188              		.loc 1 80 0 is_stmt 1
 189 0058 2369     		ldr	r3, [r4, #16]
 190 005a 05F10108 		add	r8, r5, #1
 191              	.LVL29:
 192 005e 53F82500 		ldr	r0, [r3, r5, lsl #2]
 193 0062 4FF49671 		mov	r1, #300
ARM GAS  /tmp/ccdjCcKj.s 			page 6


 194 0066 FFF7FEFF 		bl	MATCH_MARK
 195              	.LVL30:
 196 006a B8B1     		cbz	r0, .L17
  83:Src/irremote/ir_Denon.c **** 		else if (MATCH_SPACE(results->rawbuf[offset], ZERO_SPACE))  data = (data << 1) | 0 ;
 197              		.loc 1 83 0
 198 006c 2369     		ldr	r3, [r4, #16]
 199 006e 53F82800 		ldr	r0, [r3, r8, lsl #2]
 200 0072 4FF4E161 		mov	r1, #1800
 201 0076 FFF7FEFF 		bl	MATCH_SPACE
 202              	.LVL31:
 203 007a 0028     		cmp	r0, #0
 204 007c DFD0     		beq	.L11
  83:Src/irremote/ir_Denon.c **** 		else if (MATCH_SPACE(results->rawbuf[offset], ZERO_SPACE))  data = (data << 1) | 0 ;
 205              		.loc 1 83 0 is_stmt 0 discriminator 1
 206 007e 7600     		lsls	r6, r6, #1
 207              	.LVL32:
 208 0080 46F00106 		orr	r6, r6, #1
 209              	.LVL33:
 210 0084 E4E7     		b	.L12
 211              	.LVL34:
 212              	.L25:
 213              	.LBE2:
  87:Src/irremote/ir_Denon.c **** 	}
  88:Src/irremote/ir_Denon.c **** 
  89:Src/irremote/ir_Denon.c **** 	// Success
  90:Src/irremote/ir_Denon.c **** 	results->bits        = BITS;
 214              		.loc 1 90 0 is_stmt 1
 215 0086 0E23     		movs	r3, #14
 216 0088 E360     		str	r3, [r4, #12]
  91:Src/irremote/ir_Denon.c **** 	results->value       = data;
 217              		.loc 1 91 0
 218 008a A660     		str	r6, [r4, #8]
  92:Src/irremote/ir_Denon.c **** 	results->decode_type = DENON;
 219              		.loc 1 92 0
 220 008c 0F23     		movs	r3, #15
 221 008e 2370     		strb	r3, [r4]
  93:Src/irremote/ir_Denon.c ****     return TRUE;
 222              		.loc 1 93 0
 223 0090 0120     		movs	r0, #1
 224 0092 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 225              	.LVL35:
 226              	.L16:
  74:Src/irremote/ir_Denon.c **** 
 227              		.loc 1 74 0
 228 0096 0020     		movs	r0, #0
 229 0098 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 230              	.LVL36:
 231              	.L17:
 232              	.LBB3:
  80:Src/irremote/ir_Denon.c **** 
 233              		.loc 1 80 0
 234 009c 0020     		movs	r0, #0
 235 009e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 236              	.LVL37:
 237              	.L18:
  85:Src/irremote/ir_Denon.c **** 		offset++;
 238              		.loc 1 85 0
ARM GAS  /tmp/ccdjCcKj.s 			page 7


 239 00a2 0020     		movs	r0, #0
 240              	.LBE3:
  94:Src/irremote/ir_Denon.c **** }
 241              		.loc 1 94 0
 242 00a4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 243              	.LVL38:
 244              	.L27:
 245              		.align	2
 246              	.L26:
 247 00a8 00000000 		.word	irparams
 248              		.cfi_endproc
 249              	.LFE65:
 251              		.text
 252              	.Letext0:
 253              		.file 2 "/home/mpitiot/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machine/_defau
 254              		.file 3 "/home/mpitiot/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_stdint.h"
 255              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 256              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 257              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 258              		.file 7 "/home/mpitiot/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lock.h"
 259              		.file 8 "/home/mpitiot/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_types.h"
 260              		.file 9 "/home/mpitiot/opt/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/include/
 261              		.file 10 "/home/mpitiot/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/reent.h"
 262              		.file 11 "Inc/irremote/IRremoteInt.h"
 263              		.file 12 "Inc/irremote/IRremote.h"
ARM GAS  /tmp/ccdjCcKj.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ir_Denon.c
     /tmp/ccdjCcKj.s:16     .text.sendDenon:0000000000000000 $t
     /tmp/ccdjCcKj.s:23     .text.sendDenon:0000000000000000 sendDenon
     /tmp/ccdjCcKj.s:103    .text.decodeDenon:0000000000000000 $t
     /tmp/ccdjCcKj.s:110    .text.decodeDenon:0000000000000000 decodeDenon
     /tmp/ccdjCcKj.s:247    .text.decodeDenon:00000000000000a8 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
irsend_enableIROut
irsend_mark
irsend_space
MATCH_MARK
MATCH_SPACE
irparams
