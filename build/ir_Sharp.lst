ARM GAS  /tmp/ccRNJhxx.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"ir_Sharp.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.sendSharpRaw,"ax",%progbits
  16              		.align	1
  17              		.global	sendSharpRaw
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	sendSharpRaw:
  24              	.LFB64:
  25              		.file 1 "Src/irremote/ir_Sharp.c"
   1:Src/irremote/ir_Sharp.c **** #include "IRremote.h"
   2:Src/irremote/ir_Sharp.c **** #include "IRremoteInt.h"
   3:Src/irremote/ir_Sharp.c **** 
   4:Src/irremote/ir_Sharp.c **** //==============================================================================
   5:Src/irremote/ir_Sharp.c **** //                       SSSS  H   H   AAA   RRRR   PPPP
   6:Src/irremote/ir_Sharp.c **** //                      S      H   H  A   A  R   R  P   P
   7:Src/irremote/ir_Sharp.c **** //                       SSS   HHHHH  AAAAA  RRRR   PPPP
   8:Src/irremote/ir_Sharp.c **** //                          S  H   H  A   A  R  R   P
   9:Src/irremote/ir_Sharp.c **** //                      SSSS   H   H  A   A  R   R  P
  10:Src/irremote/ir_Sharp.c **** //==============================================================================
  11:Src/irremote/ir_Sharp.c **** 
  12:Src/irremote/ir_Sharp.c **** // Sharp and DISH support by Todd Treece: http://unionbridge.org/design/ircommand
  13:Src/irremote/ir_Sharp.c **** //
  14:Src/irremote/ir_Sharp.c **** // The send function has the necessary repeat built in because of the need to
  15:Src/irremote/ir_Sharp.c **** // invert the signal.
  16:Src/irremote/ir_Sharp.c **** //
  17:Src/irremote/ir_Sharp.c **** // Sharp protocol documentation:
  18:Src/irremote/ir_Sharp.c **** //   http://www.sbprojects.com/knowledge/ir/sharp.htm
  19:Src/irremote/ir_Sharp.c **** //
  20:Src/irremote/ir_Sharp.c **** // Here is the LIRC file I found that seems to match the remote codes from the
  21:Src/irremote/ir_Sharp.c **** // oscilloscope:
  22:Src/irremote/ir_Sharp.c **** //   Sharp LCD TV:
  23:Src/irremote/ir_Sharp.c **** //   http://lirc.sourceforge.net/remotes/sharp/GA538WJSA
  24:Src/irremote/ir_Sharp.c **** 
  25:Src/irremote/ir_Sharp.c **** #define SHARP_BITS             15
  26:Src/irremote/ir_Sharp.c **** #define SHARP_BIT_MARK        245
  27:Src/irremote/ir_Sharp.c **** #define SHARP_ONE_SPACE      1805
  28:Src/irremote/ir_Sharp.c **** #define SHARP_ZERO_SPACE      795
  29:Src/irremote/ir_Sharp.c **** #define SHARP_GAP          600000
  30:Src/irremote/ir_Sharp.c **** #define SHARP_RPT_SPACE      3000
  31:Src/irremote/ir_Sharp.c **** 
  32:Src/irremote/ir_Sharp.c **** #define SHARP_TOGGLE_MASK  0x3FF
  33:Src/irremote/ir_Sharp.c **** 
ARM GAS  /tmp/ccRNJhxx.s 			page 2


  34:Src/irremote/ir_Sharp.c **** //+=============================================================================
  35:Src/irremote/ir_Sharp.c **** #if SEND_SHARP
  36:Src/irremote/ir_Sharp.c **** void  sendSharpRaw (unsigned long data,  int nbits)
  37:Src/irremote/ir_Sharp.c **** {
  26              		.loc 1 37 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 3, -24
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 0546     		mov	r5, r0
  41 0004 0F46     		mov	r7, r1
  38:Src/irremote/ir_Sharp.c **** 	enableIROut(38);
  42              		.loc 1 38 0
  43 0006 2620     		movs	r0, #38
  44              	.LVL1:
  45 0008 FFF7FEFF 		bl	enableIROut
  46              	.LVL2:
  47              	.LBB2:
  39:Src/irremote/ir_Sharp.c **** 
  40:Src/irremote/ir_Sharp.c **** 	// Sending codes in bursts of 3 (normal, inverted, normal) makes transmission
  41:Src/irremote/ir_Sharp.c **** 	// much more reliable. That's the exact behaviour of CD-S6470 remote control.
  42:Src/irremote/ir_Sharp.c **** 	for (int n = 0;  n < 3;  n++) {
  48              		.loc 1 42 0
  49 000c 0026     		movs	r6, #0
  50 000e 21E0     		b	.L2
  51              	.LVL3:
  52              	.L4:
  53              	.LBB3:
  54              	.LBB4:
  55              	.LBB5:
  43:Src/irremote/ir_Sharp.c **** 		for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
  44:Src/irremote/ir_Sharp.c **** 			if (data & mask) {
  45:Src/irremote/ir_Sharp.c **** 				mark(SHARP_BIT_MARK);
  46:Src/irremote/ir_Sharp.c **** 				space(SHARP_ONE_SPACE);
  47:Src/irremote/ir_Sharp.c **** 			} else {
  48:Src/irremote/ir_Sharp.c **** 				mark(SHARP_BIT_MARK);
  56              		.loc 1 48 0
  57 0010 F520     		movs	r0, #245
  58 0012 FFF7FEFF 		bl	mark
  59              	.LVL4:
  49:Src/irremote/ir_Sharp.c **** 				space(SHARP_ZERO_SPACE);
  60              		.loc 1 49 0
  61 0016 40F21B30 		movw	r0, #795
  62 001a FFF7FEFF 		bl	space
  63              	.LVL5:
  64              	.L5:
  65              	.LBE5:
  43:Src/irremote/ir_Sharp.c **** 		for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
ARM GAS  /tmp/ccRNJhxx.s 			page 3


  66              		.loc 1 43 0 discriminator 2
  67 001e 6408     		lsrs	r4, r4, #1
  68              	.LVL6:
  69              	.L3:
  43:Src/irremote/ir_Sharp.c **** 		for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
  70              		.loc 1 43 0 is_stmt 0 discriminator 1
  71 0020 4CB1     		cbz	r4, .L9
  44:Src/irremote/ir_Sharp.c **** 				mark(SHARP_BIT_MARK);
  72              		.loc 1 44 0 is_stmt 1
  73 0022 2542     		tst	r5, r4
  74 0024 F4D0     		beq	.L4
  75              	.LBB6:
  45:Src/irremote/ir_Sharp.c **** 				space(SHARP_ONE_SPACE);
  76              		.loc 1 45 0
  77 0026 F520     		movs	r0, #245
  78 0028 FFF7FEFF 		bl	mark
  79              	.LVL7:
  46:Src/irremote/ir_Sharp.c **** 			} else {
  80              		.loc 1 46 0
  81 002c 40F20D70 		movw	r0, #1805
  82 0030 FFF7FEFF 		bl	space
  83              	.LVL8:
  84              	.LBE6:
  85 0034 F3E7     		b	.L5
  86              	.L9:
  87              	.LBE4:
  50:Src/irremote/ir_Sharp.c **** 			}
  51:Src/irremote/ir_Sharp.c **** 		}
  52:Src/irremote/ir_Sharp.c **** 
  53:Src/irremote/ir_Sharp.c **** 		mark(SHARP_BIT_MARK);
  88              		.loc 1 53 0 discriminator 2
  89 0036 F520     		movs	r0, #245
  90 0038 FFF7FEFF 		bl	mark
  91              	.LVL9:
  54:Src/irremote/ir_Sharp.c **** 		space(SHARP_ZERO_SPACE);
  92              		.loc 1 54 0 discriminator 2
  93 003c 40F21B30 		movw	r0, #795
  94 0040 FFF7FEFF 		bl	space
  95              	.LVL10:
  55:Src/irremote/ir_Sharp.c **** 		delay(40);
  96              		.loc 1 55 0 discriminator 2
  97 0044 2820     		movs	r0, #40
  98 0046 FFF7FEFF 		bl	delay
  99              	.LVL11:
  56:Src/irremote/ir_Sharp.c **** 
  57:Src/irremote/ir_Sharp.c **** 		data = data ^ SHARP_TOGGLE_MASK;
 100              		.loc 1 57 0 discriminator 2
 101 004a 85F47F75 		eor	r5, r5, #1020
 102              	.LVL12:
 103 004e 85F00305 		eor	r5, r5, #3
 104              	.LVL13:
 105              	.LBE3:
  42:Src/irremote/ir_Sharp.c **** 		for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 106              		.loc 1 42 0 discriminator 2
 107 0052 0136     		adds	r6, r6, #1
 108              	.LVL14:
 109              	.L2:
ARM GAS  /tmp/ccRNJhxx.s 			page 4


  42:Src/irremote/ir_Sharp.c **** 		for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 110              		.loc 1 42 0 is_stmt 0 discriminator 1
 111 0054 022E     		cmp	r6, #2
 112 0056 03DC     		bgt	.L10
 113              	.LBB8:
 114              	.LBB7:
  43:Src/irremote/ir_Sharp.c **** 			if (data & mask) {
 115              		.loc 1 43 0 is_stmt 1
 116 0058 7B1E     		subs	r3, r7, #1
 117 005a 0124     		movs	r4, #1
 118 005c 9C40     		lsls	r4, r4, r3
 119              	.LVL15:
 120 005e DFE7     		b	.L3
 121              	.LVL16:
 122              	.L10:
 123              	.LBE7:
 124              	.LBE8:
 125              	.LBE2:
  58:Src/irremote/ir_Sharp.c **** 	}
  59:Src/irremote/ir_Sharp.c **** }
 126              		.loc 1 59 0
 127 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 128              		.cfi_endproc
 129              	.LFE64:
 131              		.section	.text.sendSharp,"ax",%progbits
 132              		.align	1
 133              		.global	sendSharp
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu softvfp
 139              	sendSharp:
 140              	.LFB65:
  60:Src/irremote/ir_Sharp.c **** #endif
  61:Src/irremote/ir_Sharp.c **** 
  62:Src/irremote/ir_Sharp.c **** //+=============================================================================
  63:Src/irremote/ir_Sharp.c **** // Sharp send compatible with data obtained through decodeSharp()
  64:Src/irremote/ir_Sharp.c **** //                                                  ^^^^^^^^^^^^^ FUNCTION MISSING!
  65:Src/irremote/ir_Sharp.c **** //
  66:Src/irremote/ir_Sharp.c **** #if SEND_SHARP
  67:Src/irremote/ir_Sharp.c **** void  sendSharp (unsigned int address,  unsigned int command)
  68:Src/irremote/ir_Sharp.c **** {
 141              		.loc 1 68 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              	.LVL17:
 146 0000 08B5     		push	{r3, lr}
 147              	.LCFI1:
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 3, -8
 150              		.cfi_offset 14, -4
  69:Src/irremote/ir_Sharp.c **** 	sendSharpRaw((address << 10) | (command << 2) | 2, SHARP_BITS);
 151              		.loc 1 69 0
 152 0002 8900     		lsls	r1, r1, #2
 153              	.LVL18:
 154 0004 41EA8020 		orr	r0, r1, r0, lsl #10
ARM GAS  /tmp/ccRNJhxx.s 			page 5


 155              	.LVL19:
 156 0008 0F21     		movs	r1, #15
 157 000a 40F00200 		orr	r0, r0, #2
 158 000e FFF7FEFF 		bl	sendSharpRaw
 159              	.LVL20:
 160 0012 08BD     		pop	{r3, pc}
 161              		.cfi_endproc
 162              	.LFE65:
 164              		.text
 165              	.Letext0:
 166              		.file 2 "/home/mpitiot/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machine/_defau
 167              		.file 3 "/home/mpitiot/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_stdint.h"
 168              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 169              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 170              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 171              		.file 7 "/home/mpitiot/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lock.h"
 172              		.file 8 "/home/mpitiot/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_types.h"
 173              		.file 9 "/home/mpitiot/opt/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/include/
 174              		.file 10 "/home/mpitiot/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/reent.h"
 175              		.file 11 "Inc/irremote/IRremoteInt.h"
ARM GAS  /tmp/ccRNJhxx.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ir_Sharp.c
     /tmp/ccRNJhxx.s:16     .text.sendSharpRaw:0000000000000000 $t
     /tmp/ccRNJhxx.s:23     .text.sendSharpRaw:0000000000000000 sendSharpRaw
     /tmp/ccRNJhxx.s:132    .text.sendSharp:0000000000000000 $t
     /tmp/ccRNJhxx.s:139    .text.sendSharp:0000000000000000 sendSharp
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
enableIROut
mark
space
delay
